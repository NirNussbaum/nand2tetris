//InitProg
@256
D=A
@SP
M=D
//Call Sys.init 0
@Sys.init$ret.0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
A=M
M=A
@SP
M=M+1
//PUSH constant 5
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
A=M-1
D=M
@SP
M=M-1
A=M-1
M=M-D
//PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
A=M-1
D=M
@SP
M=M-1
A=M-1
M=M-D
@SP
A=M-1
D=M
@SP
M=M-1
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(Sys.init$ret.0)
// Main.fibonacci 0
(Main.fibonacci)
//PUSH ARG 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//lower than
@SP
A=M-1
D=M
@SP
M=M-1
A=M-1
D=M-D
@IS_LT_1
D;JLT
@SP
A=M-1
M=0
@END_LT_1
0;JMP
(IS_LT_1)
@SP
A=M-1
M=-1
(END_LT_1)
//if-goto Main$IF_TRUE
@SP
M=M-1
A=M
D=M
@Main$IF_TRUE
D;JNE
//goto Main$IF_FALSE
@Main$IF_FALSE
0;JMP
//label Main$IF_TRUE
(Main$IF_TRUE)
//PUSH ARG 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//Return
@LCL
D=M
@R15
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@SP
M=M-1
@ARG
D=M
@SP
M=D+1
@R15
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@R15
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@R15
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@R15
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@R14
A=M
0;JMP
//label Main$IF_FALSE
(Main$IF_FALSE)
//PUSH ARG 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
A=M-1
D=M
@SP
M=M-1
A=M-1
M=M-D
//Call Main.fibonacci 1
@Main.fibonacci$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
A=M
M=A
@SP
M=M+1
//PUSH constant 5
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
A=M-1
D=M
@SP
M=M-1
A=M-1
M=M-D
//PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
A=M-1
D=M
@SP
M=M-1
A=M-1
M=M-D
@SP
A=M-1
D=M
@SP
M=M-1
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$ret.1)
//PUSH ARG 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
A=M-1
D=M
@SP
M=M-1
A=M-1
M=M-D
//Call Main.fibonacci 1
@Main.fibonacci$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
A=M
M=A
@SP
M=M+1
//PUSH constant 5
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
A=M-1
D=M
@SP
M=M-1
A=M-1
M=M-D
//PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
A=M-1
D=M
@SP
M=M-1
A=M-1
M=M-D
@SP
A=M-1
D=M
@SP
M=M-1
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$ret.2)
//add
@SP
A=M-1
D=M
@SP
M=M-1
A=M-1
M=M+D
//Return
@LCL
D=M
@R15
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@SP
M=M-1
@ARG
D=M
@SP
M=D+1
@R15
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@R15
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@R15
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@R15
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// Sys.init 0
(Sys.init)
//PUSH constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
//Call Main.fibonacci 1
@Main.fibonacci$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
A=M
M=A
@SP
M=M+1
//PUSH constant 5
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
A=M-1
D=M
@SP
M=M-1
A=M-1
M=M-D
//PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
A=M-1
D=M
@SP
M=M-1
A=M-1
M=M-D
@SP
A=M-1
D=M
@SP
M=M-1
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$ret.3)
//label Sys$WHILE
(Sys$WHILE)
//goto Sys$WHILE
@Sys$WHILE
0;JMP
