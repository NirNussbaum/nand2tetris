class Spongbob {

    field int x, y; // screen location of the Spongbob.
    field int size, wight; 
    field int jumpDelay;
    field int memAddress;
    field boolean jumped;
 
    /** Constructs a new Spongbob with a given location and size. */
    constructor Spongbob new(int a, int b) {
       let x = a;
       let y = b;
       let size = 20;
       let wight = 20;
       let jumped = false;
       do draw();
       return this;
    }

    /** Disposes this Spongbob. */
    method void dispose() {
       do Memory.deAlloc(this);
       return;
    }

   /** get Spongbob y position with jump delay. */
    method int get_y(){
      return y + jumpDelay + 16;
    }

    /** Draws the Spongbob on the screen. */
    method void draw() {
      do Screen.setColor(true);
      if (jumpDelay = 16){
         let jumpDelay = 0;
         let jumped = false;
      }
      if(jumped){
         let jumpDelay = jumpDelay + 2;
      }
      let y = y + jumpDelay;
      let memAddress = Spongbob.get_add(y);
      //Draw Spongbob start with memAddress.
      do draw_Spongbob(memAddress);
      return;
    }

    /** draw the Spongbob using the ram address */
   method void draw_Spongbob(int location) {
 let memAddress = 16384+location;
	do Memory.poke(memAddress+0, -1);
	do Memory.poke(memAddress+32, -32767);
	do Memory.poke(memAddress+64, -26599);
	do Memory.poke(memAddress+96, -32767);
	do Memory.poke(memAddress+128, -32383);
	do Memory.poke(memAddress+160, -28655);
	do Memory.poke(memAddress+192, -28703);
	do Memory.poke(memAddress+224, -32767);
	do Memory.poke(memAddress+256, -1);
	do Memory.poke(memAddress+288, -31807);
	do Memory.poke(memAddress+320, -1);
	do Memory.poke(memAddress+352, -31807);
	do Memory.poke(memAddress+384, -32191);
	do Memory.poke(memAddress+416, -32191);
	do Memory.poke(memAddress+448, -32191);
	do Memory.poke(memAddress+480, -385);
      return;
   }

    /** erase the Spongbob using the ram addresses. */
    method void erase_Spongbob(int location) {
      let memAddress = 16384+location;
      do Memory.poke(memAddress+0, 0);
      do Memory.poke(memAddress+32, 0);
      do Memory.poke(memAddress+64, 0);
      do Memory.poke(memAddress+96, 0);
      do Memory.poke(memAddress+128, 0);
      do Memory.poke(memAddress+160, 0);
      do Memory.poke(memAddress+192, 0);
      do Memory.poke(memAddress+224, 0);
      do Memory.poke(memAddress+256, 0);
      do Memory.poke(memAddress+288, 0);
      do Memory.poke(memAddress+320, 0);
      do Memory.poke(memAddress+352, 0);
      do Memory.poke(memAddress+384, 0);
      do Memory.poke(memAddress+416, 0);
      do Memory.poke(memAddress+448, 0);
      do Memory.poke(memAddress+480, 0);
      return;
   }

    /** Erases the Spongbob from the screen. */
   method void erase() {
      do Screen.setColor(false);
      let memAddress = Spongbob.get_add(y);
      do erase_Spongbob(memAddress);
      return;
   }

   /** get the Spongbob top left address */
   function int get_add(int y){
      return 32 * y + 1;
   }

    /** let the Spongbob jumpDelay to be -18. */
    method void jump() {
       if (~jumped) {
         let jumped = true;
         do erase();
         let jumpDelay = -18;
       }
       return;
    }

 }
 