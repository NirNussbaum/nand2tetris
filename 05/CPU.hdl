// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
    //check if A or C instruction.
    Not(in=instruction[15], out=AInstruction);
    Mux16(a=instruction, b=ALUout, sel=instruction[15], out=outMuxOne);

    //if A instruction or bit 5 on --> load into ARegister.
    Or(a=AInstruction, b=instruction[5], out=loadA);
    ARegister(in=outMuxOne, load=loadA, out=regAOut, out[0..14]=addressM); //A
    
    //check if C instruction and bit 12 on.
    And(a=instruction[15], b=instruction[12], out=adrOrMem);
    Mux16(a=regAOut, b=inM, sel=adrOrMem, out=outMuxTwo);

    //check if load to DRegister depend on C Instruction and bit 4.
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=ALUout, load=loadD, out=regDout); //D

    ALU(x=regDout, y=outMuxTwo, zx=instruction[11], nx=instruction[10],
     zy=instruction[9], ny=instruction[8], f=instruction[7],
      no=instruction[6], out=ALUout, out=outM, zr=ALUoutZR, ng=ALUoutNG);

    //write to M if C instruction and bit 3 are on.
    And(a=instruction[3], b=instruction[15], out=writeM);

    //check the jump conditions.
    Not(in=ALUoutNG, out=postiveOrZero);
    Not(in=ALUoutZR, out=notZero);
    And(a=postiveOrZero, b=notZero, out=postive);

    And(a=instruction[0], b=postive, out=if1);
    And(a=instruction[1], b=ALUoutZR, out=if2);
    And(a=instruction[2], b=ALUoutNG, out=if3);

    Or(a=if1, b=if2, out=or1);
    Or(a=or1, b=if3, out=or2);

    //if it is not c instruction do not load to pc anything. 
    And(a=instruction[15], b=or2, out=loadpc);
    PC(in=regAOut, load=loadpc, inc=true, reset=reset, out[0..14]=pc);
}
